# a
CREATE TABLE category (
    category_id INTEGER PRIMARY KEY,
    name TEXT
);

CREATE TABLE products (
    product_id INTEGER PRIMARY KEY,
    name TEXT,
    price INTEGER,
    category_id INTEGER,
    FOREIGN KEY (category_id) REFERENCES category (category_id)
);

CREATE TABLE nutritions (
    nutrition_id INTEGER PRIMARY KEY,
    product_id INTEGER,
    name TEXT,
    calories INTEGER,
    fats INTEGER,
    sugar INTEGER,
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);

CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY,
    date_time TEXT,
    address TEXT,
    customer_name TEXT,
    customer_ph TEXT,
    total_price INTEGER
);

CREATE TABLE products_orders (
    order_id INTEGER,
    product_id INTEGER,
    amount INTEGER,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders (order_id),
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);

# b
Category-Products: o:m
Products-Nutritions: o:o
Products-Orders: m:m

# c
INSERT INTO category (name) VALUES
('Beverages'),
('Snacks'),
('Dairy'),
('Fruits'),
('Vegetables');

INSERT INTO products (name, price, category_id) VALUES
('Orange Juice', 5.99, 1),
('Chocolate Bar', 2.50, 2),
('Milk', 3.20, 3),
('Apple', 1.50, 4),
('Carrot', 0.99, 5),
('Coca Cola', 1.50, 1),    -- Beverages
('Pepsi', 1.40, 1),        -- Beverages
('Water Bottle', 0.99, 1), -- Beverages
('Orange Soda', 1.70, 1),  -- Beverages
('Iced Tea', 2.00, 1),     -- Beverages
('Potato Chips', 1.80, 2),   -- Snacks
('Pretzels', 2.20, 2),       -- Snacks
('Popcorn', 1.99, 2),        -- Snacks
('Granola Bar', 1.50, 2),    -- Snacks
('Cookies', 3.00, 2),        -- Snacks
('Cheese', 4.50, 3),      -- Dairy
('Yogurt', 1.25, 3),      -- Dairy
('Butter', 3.75, 3),      -- Dairy
('Cream Cheese', 2.50, 3),-- Dairy
('Ice Cream', 5.00, 3),   -- Dairy
('Banana', 1.20, 4),      -- Fruits
('Grapes', 2.99, 4),      -- Fruits
('Mango', 1.75, 4),       -- Fruits
('Pineapple', 3.00, 4),   -- Fruits
('Strawberries', 2.80, 4);-- Fruits


INSERT INTO nutritions (product_id, name, calories, fats, sugar) VALUES
(1, 'Orange Juice', 120, 0.2, 20),
(2, 'Chocolate Bar', 220, 12, 18),
(3, 'Milk', 150, 8, 12),
(4, 'Apple', 95, 0.3, 19),
(5, 'Carrot', 41, 0.1, 5),
(6, 'Coca Cola', 140, 0, 39),      -- Coca Cola
(7, 'Pepsi', 150, 0, 41),          -- Pepsi
(8, 'Water Bottle', 0, 0, 0),      -- Water Bottle
(9, 'Orange Soda', 160, 0, 44),    -- Orange Soda
(10, 'Iced Tea', 90, 0, 23),       -- Iced Tea
(11, 'Potato Chips', 160, 10, 1),  -- Potato Chips
(12, 'Pretzels', 110, 1, 1),       -- Pretzels
(13, 'Popcorn', 120, 5, 0),        -- Popcorn
(14, 'Granola Bar', 150, 6, 7),    -- Granola Bar
(15, 'Cookies', 250, 12, 18),      -- Cookies
(16, 'Cheese', 113, 9, 1),         -- Cheese
(17, 'Yogurt', 80, 1.5, 11),       -- Yogurt
(18, 'Butter', 100, 11, 0),        -- Butter
(19, 'Cream Cheese', 99, 10, 1),   -- Cream Cheese
(20, 'Ice Cream', 270, 14, 28),    -- Ice Cream
(21, 'Banana', 105, 0.3, 14),      -- Banana
(22, 'Grapes', 62, 0.3, 15),       -- Grapes
(23, 'Mango', 99, 0.6, 23),        -- Mango
(24, 'Pineapple', 50, 0.1, 10),    -- Pineapple
(25, 'Strawberries', 53, 0.5, 8);  -- Strawberries

INSERT INTO orders (date_time, address, customer_name, customer_ph, total_price) VALUES
('2024-09-17 10:30', '123 Main St', 'John Doe', '555-1234', 30.08),
('2024-09-17 11:45', '456 Oak St', 'Jane Smith', '555-5678', 20.13),
('2024-09-17 12:15', '789 Pine St', 'Emily Davis', '555-8765', 22.22),
('2024-09-17 13:00', '321 Elm St', 'Michael Johnson', '555-4321', 15.15),
('2024-09-17 13:30', '654 Maple St', 'Sarah Wilson', '555-6789', 30.99);

INSERT INTO products_orders (order_id, product_id, amount) VALUES
(1, 1, 2),
(1, 2, 1),
(2, 3, 1),
(3, 4, 3),
(4, 5, 5),
(5, 1, 1),
(5, 3, 2),
(5, 4, 2),
(1, 6, 3),     -- Coca Cola
(1, 11, 1),    -- Potato Chips
(2, 7, 2),     -- Pepsi
(2, 12, 2),    -- Pretzels
(3, 8, 1),     -- Water Bottle
(3, 13, 2),    -- Popcorn
(4, 9, 1),     -- Orange Soda
(4, 14, 2),    -- Granola Bar
(5, 10, 1),    -- Iced Tea
(5, 15, 1),    -- Cookies
(1, 16, 1),    -- Cheese
(2, 17, 3),    -- Yogurt
(3, 18, 2),    -- Butter
(4, 19, 1),    -- Cream Cheese
(5, 20, 1),    -- Ice Cream
(1, 21, 4),    -- Banana
(2, 22, 2),    -- Grapes
(3, 23, 3),    -- Mango
(4, 24, 1),    -- Pineapple
(5, 25, 2);    -- Strawberries

# d
# 1
SELECT p.name, n.calories, n.fats, n.sugar, c.name
FROM products p
JOIN category c ON c.category_id = p.category_id
JOIN nutritions n ON n.product_id = p.product_id;

# 2
SELECT po.order_id, p.name, p.price, p.category_id, n.calories, n.fats, n.sugar
FROM products_orders po
JOIN products p ON p.product_id = po.product_id
JOIN nutritions n ON n.product_id = p.product_id;

# 3
INSERT INTO products_orders (order_id, product_id, amount) VALUES
(1, 3, 1),
(2, 2, 1),
(3, 3, 1),
(4, 4, 1),
(5, 5, 1);

# 4
UPDATE orders
SET total_price = (
    SELECT SUM(p.price * po.amount)
    FROM products_orders po
    JOIN products p ON po.product_id = p.product_id
    WHERE po.order_id = orders.order_id
);

# 5
SELECT 'Most Expensive Order' AS statistics_description, MAX(total_price) AS value FROM orders
UNION ALL
SELECT 'Cheapest Order' AS statistics_description, MIN(total_price) AS value FROM orders
UNION ALL
SELECT 'Average Order Price' AS statistics_description, AVG(total_price) AS value FROM orders;

# 6
SELECT customer_name, max(cnt_orders)
FROM (
      SELECT o.customer_name , count(po.order_id) AS cnt_orders
      FROM products_orders po
      JOIN orders o ON o.order_id = po.order_id
      GROUP BY o.customer_name
     );

# 7
SELECT 'Most Sold Product' AS statistics_description, p.name , SUM(po.amount) AS value
FROM products_orders po
JOIN products p ON p.product_id = po.product_id
GROUP BY po.product_id
HAVING value = (
    			SELECT MAX(total_sold)
    		    FROM (
    				  SELECT po.product_id, SUM(po.amount) AS total_sold
    				  FROM products_orders po
                      GROUP BY po.product_id
                     )
               )
UNION ALL
SELECT 'Least Sold Product' AS statistics_description, p.name , SUM(po.amount) AS value
FROM products_orders po
JOIN products p ON p.product_id = po.product_id
GROUP BY po.product_id
HAVING value = (
    		    SELECT Min(total_sold)
    			FROM (
    				  SELECT po.product_id, SUM(po.amount) AS total_sold
    				  FROM products_orders po
                      GROUP BY po.product_id
                     )
                );

 SELECT avg(total_sold) as avg_total_sold
 FROM (
 	   SELECT product_id, SUM(amount) AS total_sold
       FROM products_orders
       GROUP BY product_id
      );

# 8
SELECT 'Most Sold Category' AS statistics_description, c.name , SUM(po.amount) AS value
FROM products_orders po
JOIN products p ON p.product_id = po.product_id
JOIN category c ON c.category_id = p.category_id
GROUP BY c.category_id
HAVING value = (
    			SELECT MAX(total_sold)
    		    FROM (
    				  SELECT c.category_id , SUM(po.amount) AS total_sold
    				  FROM products_orders po
    				  JOIN products p ON p.product_id = po.product_id
					  JOIN category c ON c.category_id = p.category_id
                      GROUP BY c.category_id
                     )
               )
UNION ALL
SELECT 'Least Sold Category' AS statistics_description, c.name , SUM(po.amount) AS value
FROM products_orders po
JOIN products p ON p.product_id = po.product_id
JOIN category c ON c.category_id = p.category_id
GROUP BY c.category_id
HAVING value = (
    		    SELECT Min(total_sold)
    			FROM (
    				  SELECT c.category_id , SUM(po.amount) AS total_sold
    				  FROM products_orders po
    				  JOIN products p ON p.product_id = po.product_id
					  JOIN category c ON c.category_id = p.category_id
                      GROUP BY c.category_id
                     )
                );

# 9
SELECT name, max(cnt_orders) AS max_product
FROM (
	  SELECT p.name, count(order_id) AS cnt_orders
      FROM products_orders po
      JOIN products p ON p.product_id = po.product_id
      group by p.name
     );

